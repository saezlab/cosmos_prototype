bipartite_net <- unique(bipartite_net)
inputs <- kinact_for_phonemes[1,]
measurments <- psites_for_phonemes[1,]
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
measurments <- measurments[,as.vector(apply(measurments,1,function(x) {x <= 0.2 & !is.na(x)}))]
for (i in 1:length(measurments[1,]))
{
measurments[,i] <- 1
}
bipartite_net$sign <- 1
bipartite_net <- unique(bipartite_net)
test <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = bipartite_net[,c(1,3,2)], measurements = measurments, inputs = inputs, timelimit = 100)
causal_network <- test$weightedSIF
View(causal_network)
carni_res_list <- list()
for(i in 1:length(kinact_for_phonemes[,1]))
{
inputs <- kinact_for_phonemes[1,]
measurments <- psites_for_phonemes[1,]
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
measurments <- measurments[,as.vector(apply(measurments,1,function(x) {x <= 0.2 & !is.na(x)}))]
for (i in 1:length(measurments[1,]))
{
measurments[,i] <- 1
}
bipartite_net$sign <- 1
bipartite_net <- unique(bipartite_net)
carni_res_list[[i]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = bipartite_net[,c(1,3,2)], measurements = measurments, inputs = inputs, timelimit = 100)
}
names(carni_res_list) <- row.names(kinact_for_phonemes)
save(carni_res_list, file = "~/Dropbox/beltrao_prob_network/results/carnival_networks.RData")
View(carni_res_list)
names(carni_res_list) <- row.names(kinact_for_phonemes)
i in 1:length(kinact_for_phonemes[,1])
i in 1:length(kinact_for_phonemes[,1])
1:length(kinact_for_phonemes[,1])
for(i in 1:length(kinact_for_phonemes[,1]))
{
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
measurments <- measurments[,as.vector(apply(measurments,1,function(x) {x <= 0.2 & !is.na(x)}))]
for (j in 1:length(measurments[1,]))
{
measurments[,j] <- 1
}
bipartite_net$sign <- 1
bipartite_net <- unique(bipartite_net)
carni_res_list[[i]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = bipartite_net[,c(1,3,2)], measurements = measurments, inputs = inputs, timelimit = 100)
}
names(carni_res_list) <- row.names(kinact_for_phonemes)
View(measurments)
View(inputs)
dim(inputs)
carni_res_list <- list()
for(i in 1:length(kinact_for_phonemes[,1]))
{
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
measurments <- measurments[,as.vector(apply(measurments,1,function(x) {x <= 0.2 & !is.na(x)}))]
for (j in 1:length(measurments[1,]))
{
measurments[,j] <- 1
}
bipartite_net$sign <- 1
bipartite_net <- unique(bipartite_net)
if(dim(inputs)[2] > 0 & dim(measurments)[2] > 0)
{
carni_res_list[[i]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = bipartite_net[,c(1,3,2)], measurements = measurments, inputs = inputs, timelimit = 100)
}
}
names(carni_res_list) <- row.names(kinact_for_phonemes)
inputs
View(pknList)
View(measurments)
dim(inputs)
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
inputs <- kinact_for_phonemes[i,]
View(inputs)
i <- 18
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
inputs <- kinact_for_phonemes[i,]
View(inputs)
sum(inputs[1,])
sum(inputs[1,], na.rm = T)
i <- 19
inputs <- kinact_for_phonemes[i,]
inputs[inputs[1,]  == 1]
inputs[1,]
inputs[as.numeric(inputs[1,])  == 1]
inputs[,inputs[1,]  == 1]
inputs[,as.numeric(inputs[1,])  == 1]
inputs[,as.numeric(inputs[1,]) == 1]
inputs[,3]
inputs[,c(T,F,F,T)]
as.numeric(inputs[1,])
as.numeric(inputs[1,]) == 1
as.numeric(inputs[1,]) == 1 & !(is.na(inputs[1,]))
as.numeric(inputs[1,]) == 1 & !(is.na(as.numeric(inputs[1,])))
inputs[,as.numeric(inputs[1,]) == 1 & !(is.na(as.numeric(inputs[1,])))]
names(inputs[,as.numeric(inputs[1,]) == 1 & !(is.na(as.numeric(inputs[1,])))])
isTRUE(as.numeric(inputs[1,]) == 1 & !(is.na(as.numeric(inputs[1,]))))
inputs[] <- inputs[,as.numeric(inputs[1,]) == 1 & !(is.na(as.numeric(inputs[1,])))]
View(inputs)
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
as.data.frame(inputs[,as.numeric(inputs[1,]) == 1 & !(is.na(as.numeric(inputs[1,])))])
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
if(sum(inputs[1,], na.rm = T) > 1)
{
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
}
else
{
test <- as.numeric(inputs[1,]) == 1 & !(is.na(as.numeric(inputs[1,])))
j <- 1
while(!test[j])
{
j <- j+1
}
temp <- as.data.frame(inputs[,j])
names(temp) <- names(temp)[j]
inputs <- temp
}
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
if(sum(inputs[1,], na.rm = T) > 1)
{
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
}
else
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
if(sum(inputs[1,], na.rm = T) > 1)
{
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
} else
{
test <- as.numeric(inputs[1,]) == 1 & !(is.na(as.numeric(inputs[1,])))
j <- 1
while(!test[j])
{
j <- j+1
}
temp <- as.data.frame(inputs[,j])
names(temp) <- names(temp)[j]
inputs <- temp
}
measurments <- measurments[,as.vector(apply(measurments,1,function(x) {x <= 0.2 & !is.na(x)}))]
for (j in 1:length(measurments[1,]))
{
measurments[,j] <- 1
}
bipartite_net$sign <- 1
bipartite_net <- unique(bipartite_net)
View(inputs)
names(temp)[j]
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
if(sum(inputs[1,], na.rm = T) > 1)
{
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
} else
{
test <- as.numeric(inputs[1,]) == 1 & !(is.na(as.numeric(inputs[1,])))
j <- 1
while(!test[j])
{
j <- j+1
}
temp <- as.data.frame(inputs[,j])
names(temp) <- names(inputs)[j]
inputs <- temp
}
measurments <- measurments[,as.vector(apply(measurments,1,function(x) {x <= 0.2 & !is.na(x)}))]
for (j in 1:length(measurments[1,]))
{
measurments[,j] <- 1
}
bipartite_net$sign <- 1
bipartite_net <- unique(bipartite_net)
View(inputs)
for(i in 1:length(kinact_for_phonemes[,1]))
{
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
if(sum(inputs[1,], na.rm = T) > 1)
{
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
} else
{
test <- as.numeric(inputs[1,]) == 1 & !(is.na(as.numeric(inputs[1,])))
j <- 1
while(!test[j])
{
j <- j+1
}
temp <- as.data.frame(inputs[,j])
names(temp) <- names(inputs)[j]
inputs <- temp
}
measurments <- measurments[,as.vector(apply(measurments,1,function(x) {x <= 0.2 & !is.na(x)}))]
for (j in 1:length(measurments[1,]))
{
measurments[,j] <- 1
}
bipartite_net$sign <- 1
bipartite_net <- unique(bipartite_net)
if(dim(inputs)[2] > 0 & dim(measurments)[2] > 0)
{
carni_res_list[[i]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = bipartite_net[,c(1,3,2)], measurements = measurments, inputs = inputs, timelimit = 100)
}
}
names(carni_res_list) <- row.names(kinact_for_phonemes)
save(carni_res_list, file = "~/Dropbox/beltrao_prob_network/results/carnival_networks.RData")
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
sum(inputs[1,], na.rm = T)
for(i in 1:length(kinact_for_phonemes[,1]))
{
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
run_it <- T
if(sum(inputs[1,], na.rm = T) > 1)
{
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
} else if(sum(inputs[1,], na.rm = T) == 1)
{
test <- as.numeric(inputs[1,]) == 1 & !(is.na(as.numeric(inputs[1,])))
j <- 1
while(!test[j])
{
j <- j+1
}
temp <- as.data.frame(inputs[,j])
names(temp) <- names(inputs)[j]
inputs <- temp
} else
{
run_it <- F
}
measurments <- measurments[,as.vector(apply(measurments,1,function(x) {x <= 0.2 & !is.na(x)}))]
for (j in 1:length(measurments[1,]))
{
measurments[,j] <- 1
}
bipartite_net$sign <- 1
bipartite_net <- unique(bipartite_net)
if(dim(inputs)[2] > 0 & dim(measurments)[2] > 0 & run_it)
{
carni_res_list[[i]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = bipartite_net[,c(1,3,2)], measurements = measurments, inputs = inputs, timelimit = 100)
}
}
names(carni_res_list) <- row.names(kinact_for_phonemes)
save(carni_res_list, file = "~/Dropbox/beltrao_prob_network/results/carnival_networks.RData")
View(inputs)
View(measurments)
for(i in 55:length(kinact_for_phonemes[,1])) #54 failed
{
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
run_it <- T
if(sum(inputs[1,], na.rm = T) > 1)
{
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
} else if(sum(inputs[1,], na.rm = T) == 1)
{
test <- as.numeric(inputs[1,]) == 1 & !(is.na(as.numeric(inputs[1,])))
j <- 1
while(!test[j])
{
j <- j+1
}
temp <- as.data.frame(inputs[,j])
names(temp) <- names(inputs)[j]
inputs <- temp
} else
{
run_it <- F
}
measurments <- measurments[,as.vector(apply(measurments,1,function(x) {x <= 0.2 & !is.na(x)}))]
for (j in 1:length(measurments[1,]))
{
measurments[,j] <- 1
}
bipartite_net$sign <- 1
bipartite_net <- unique(bipartite_net)
if(dim(inputs)[2] > 0 & dim(measurments)[2] > 0 & run_it)
{
carni_res_list[[i]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = bipartite_net[,c(1,3,2)], measurements = measurments, inputs = inputs, timelimit = 100)
}
}
names(carni_res_list) <- row.names(kinact_for_phonemes)
View(inputs)
View(measurments)
for(i in 82:length(kinact_for_phonemes[,1])) #54,81 failed
{
inputs <- kinact_for_phonemes[i,]
measurments <- psites_for_phonemes[i,]
run_it <- T
if(sum(inputs[1,], na.rm = T) > 1)
{
inputs <- inputs[,as.vector(apply(inputs,1,function(x) {x != 0 & !is.na(x)}))]
} else if(sum(inputs[1,], na.rm = T) == 1)
{
test <- as.numeric(inputs[1,]) == 1 & !(is.na(as.numeric(inputs[1,])))
j <- 1
while(!test[j])
{
j <- j+1
}
temp <- as.data.frame(inputs[,j])
names(temp) <- names(inputs)[j]
inputs <- temp
} else
{
run_it <- F
}
measurments <- measurments[,as.vector(apply(measurments,1,function(x) {x <= 0.2 & !is.na(x)}))]
for (j in 1:length(measurments[1,]))
{
measurments[,j] <- 1
}
bipartite_net$sign <- 1
bipartite_net <- unique(bipartite_net)
if(dim(inputs)[2] > 0 & dim(measurments)[2] > 0 & run_it)
{
carni_res_list[[i]] <- runCARNIVAL(CplexPath = "~/Documents/cplex", network = bipartite_net[,c(1,3,2)], measurements = measurments, inputs = inputs, timelimit = 100)
}
}
names(carni_res_list) <- row.names(kinact_for_phonemes)[-c(54,81)]
save(carni_res_list, file = "~/Dropbox/beltrao_prob_network/results/carnival_networks.RData")
test <- carni_res_list[[1]]
edges <- causal_network[,c(1,3,2,4)]
edges$Node1 <- as.character(edges$Node1)
edges$Node2 <- as.character(edges$Node2)
edges$Sign <- as.numeric(as.character(edges$Sign))
edges$Weight <- as.numeric(as.character(edges$Weight))
edges <- edges[edges$Weight >75,]
causal_nodes <- as.data.frame(matrix(NA,length(unique(c(edges$Node1,edges$Node2))),2))
View(test)
test
test$weightedSIF
sif_list <- list()
sif_list <- list()
i <- 1
for(res in carni_res_list)
{
sif_list[[i]] <- res[[1]]
i <- i+1
}
save(sif_list, file = "~/Dropbox/beltrao_prob_network/results/carnival_sif_networks.RData")
View(sif_list)
names(sif_list) <- names(carni_res_list)
save(sif_list, file = "~/Dropbox/beltrao_prob_network/results/carnival_sif_networks.RData")
View(sif_list)
View(sif_list)
row.names(kinact_for_phonemes)[c(54,81)]
View(sif_list)
sif_list[[1]]
merged_predictor <- as.data.frame(read_delim("Dropbox/beltrao_prob_network/support/merged-predictor.tsv", "\t", escape_double = FALSE, trim_ws = TRUE))
library(readr)
library(CARNIVAL)
library(visNetwork)
merged_predictor <- as.data.frame(read_delim("Dropbox/beltrao_prob_network/support/merged-predictor.tsv", "\t", escape_double = FALSE, trim_ws = TRUE))
psites_for_phonemes <- as.data.frame(read_csv("Dropbox/beltrao_prob_network/data/psites_for_phonemes.csv"))
bottom_part <- psites_for_phonemes[,c(1,2)]
bottom_part$prot2 <- gsub("_.*","",bottom_part$X1)
bottom_part <- bottom_part[,c(1,3)]
names(bottom_part)[1] <- "psite"
merged_predictor <- merged_predictor[!is.na(merged_predictor$bart.pred.mean),]
merged_predictor_confident <- merged_predictor[merged_predictor$bart.pred.mean > 0.5,c(1,2)]
signaling_pathway_matebolic_network <- read_csv("signaling_pathway_matebolic_network.csv")
library(doParallel)
argsJob= commandArgs(trailingOnly=TRUE)
repIndex <- as.numeric(argsJob[1])
library(readr)
signaling_pathway_matebolic_network <- read_csv("signaling_pathway_matebolic_network.csv")
library(doParallel)
argsJob= commandArgs(trailingOnly=TRUE)
repIndex <- as.numeric(argsJob[1])
repIndex <- 1
sif = signaling_pathway_matebolic_network
loopLength = 3
signaling_pathway_matebolic_network <- read_csv("signaling_pathway_matebolic_network.csv")
setwd("~/Dropbox/kidney_cancer_multiomic_pipeline/scripts")
signaling_pathway_matebolic_network <- read_csv("signaling_pathway_matebolic_network.csv")
nParallel = 100
sif = signaling_pathway_matebolic_network
sif1 <- sif
g <- graph_from_data_frame(d = as.data.frame(sif1[, c(1, 3)]), directed = TRUE)
adj <- get.adjacency(g)
library(igraph)
library(doParallel)
g <- graph_from_data_frame(d = as.data.frame(sif1[, c(1, 3)]), directed = TRUE)
adj <- get.adjacency(g)
adjacency <- get.adjacency(g)
get_loops <- function(adj, paths, maxlen){
maxlen <- maxlen - 1
nxt_paths <- list()
for(path in paths$paths){
for(nxt in adj[[path[length(path)]]]){
nxt_path <- c(path, nxt)
if(path[1] == nxt & min(path) == nxt){
paths$loops <- c(paths$loops, list(nxt_path))
}else if(!(nxt %in% path)){
nxt_paths <- c(nxt_paths, list(nxt_path))
}
}
}
paths$paths <- nxt_paths
if(maxlen == 0){
return(paths)
}else{
return(get_loops(adj, paths, maxlen))
}
}
adj <- list()
loops <- list()
maxlen <- loopLength
for(v in V(g)){
adj[[as.numeric(v)]] <- neighbors(g, v)
}
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
SS = chunk(x = seq(length(adj)), n = nParallel)
View(SS)
cnt = 1
SS[[repIndex]]
for(start in SS[[repIndex]]){
print(paste0(start, " out of ", SS[[repIndex]][cnt]))
cnt = cnt + 1
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
cnt = 1
for(start in SS[[repIndex]]){
print(paste0(start, " out of ", SS[[length(SS)]][cnt]))
cnt = cnt + 1
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
SS[[repIndex]]
cnt = 1
for(start in SS[[repIndex]]){
print(paste0(start, " out of ", SS[[repIndex]][length(SS[[repIndex]])]))
cnt = cnt + 1
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
repIndex <- 10
cnt = 1
for(start in SS[[repIndex]]){
print(paste0(start, " out of ", SS[[repIndex]][length(SS[[repIndex]])]))
cnt = cnt + 1
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
library(parallel)
?set.seed
loopLength <- 2
loopLength <- 3
SS <- SS[c(1:5)]
nRun <- 5
loops_list = mclapply( 1:nRun, function(repIndex,SS, maxlen){
loops <- list()
for(start in SS[[repIndex]]){
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
return(loop)
},SS, maxlen, mc.cores = min(c(nCores,detectCores()-1)))
nCores <- 3
loops_list = mclapply( 1:nRun, function(repIndex,SS, maxlen){
loops <- list()
for(start in SS[[repIndex]]){
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
return(loop)
},SS, maxlen, mc.cores = min(c(nCores,detectCores()-1)))
View(adj)
loops_list = mclapply( 1:nRun, function(repIndex,SS, maxlen, adj){
loops <- list()
for(start in SS[[repIndex]]){
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
return(loops)
},SS, maxlen, adj, mc.cores = min(c(nCores,detectCores()-1)))
View(loops_list)
nParallel <- detectCores()
SS = chunk(x = seq(length(adj)), n = nParallel)
SS <- SS[c(1:5)]
SS = chunk(x = seq(length(adj)), n = nParallel)
View(SS)
View(SS)
View(loops_list)
loops_list[[1]]
View(loops_list)
ll = list()
for(i in 1:length(loops_list)){
for(j in 1:length(loops_list[[i]])){
ll[[length(ll)+1]] = loops_list[[i]][[j]]
}
}
View(ll)
