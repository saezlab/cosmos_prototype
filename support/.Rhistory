if(maxlen == 0){
return(paths)
}else{
return(get_loops(adj, paths, maxlen))
}
paths
path[length(path)]
paths$paths
getLoops_parallel <- function(sif = sif, loopLength = 3){
sif1 <- sif
g <- graph_from_data_frame(d = as.data.frame(sif1[, c(1, 3)]), directed = TRUE)
adj <- get.adjacency(g)
adjacency <- get.adjacency(g)
get_loops <- function(adj, paths, maxlen){
maxlen <- maxlen - 1
nxt_paths <- list()
for(path in paths$paths){
for(nxt in adj[[path[length(path)]]]){
nxt_path <- c(path, nxt)
if(path[1] == nxt & min(path) == nxt){
paths$loops <- c(paths$loops, list(nxt_path))
}else if(!(nxt %in% path)){
nxt_paths <- c(nxt_paths, list(nxt_path))
}
}
}
paths$paths <- nxt_paths
if(maxlen == 0){
return(paths)
}else{
return(get_loops(adj, paths, maxlen))
}
}
adj <- list()
loops <- list()
maxlen <- loopLength
for(v in V(g)){
adj[[as.numeric(v)]] <- neighbors(g, v)
}
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
nParallel <- detectCores()
SS = chunk(x = seq(length(adj)), n = nParallel)
loops_list <- mclapply(1:nParallel, function(repIndex,SS, maxlen, adj){
loops <- list()
for(start in SS[[repIndex]]){
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
return(loops)
},SS, maxlen, adj, mc.cores = detectCores())
return(loops_list)
# ll = list()
# for(i in 1:length(loops_list)){
#   for(j in 1:length(loops_list[[i]])){
#     ll[[length(ll)+1]] = loops_list[[i]][[j]]
#   }
# }
#
# return(ll)
# if(length(loops) > 0){
#
#   ll <- list()
#   for(i in 1:length(loops)){
#
#     ll[[length(ll)+1]] <- rownames(adjacency)[loops[[i]][1:(length(loops[[i]])-1)]]
#
#   }
#
#   return(ll)
#
# }
# else{return(NULL)}
}
library(readr)
signaling_pathway_matebolic_network <- read_csv("signaling_pathway_matebolic_network.csv")
library(doParallel)
argsJob= commandArgs(trailingOnly=TRUE)
library(igraph)
library(parallel)
ll = getLoops_parallel(sif = signaling_pathway_matebolic_network, loopLength = 3)
View(signaling_pathway_matebolic_network)
getLoops_parallel <- function(sif = sif, loopLength = 3){
sif1 <- sif
g <- graph_from_data_frame(d = as.data.frame(sif1[, c(1, 3)]), directed = TRUE)
adj <- get.adjacency(g)
adjacency <- get.adjacency(g)
get_loops <- function(adj, paths, maxlen){
maxlen <- maxlen - 1
nxt_paths <- list()
for(path in paths$paths){
for(nxt in adj[[path[length(path)]]]){
nxt_path <- c(path, nxt)
if(path[1] == nxt & min(path) == nxt){
paths$loops <- c(paths$loops, list(nxt_path))
}else if(!(nxt %in% path)){
nxt_paths <- c(nxt_paths, list(nxt_path))
}
}
}
paths$paths <- nxt_paths
if(maxlen == 0){
return(paths)
}else{
return(get_loops(adj, paths, maxlen))
}
}
adj <- list()
loops <- list()
maxlen <- loopLength
for(v in V(g)){
adj[[as.numeric(v)]] <- neighbors(g, v)
}
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
nParallel <- detectCores()
SS = chunk(x = seq(length(adj)), n = nParallel)
loops_list <- mclapply(1:nParallel, function(repIndex,SS, maxlen, adj){
loops <- list()
for(start in SS[[repIndex]]){
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
return(loops)
},SS, maxlen, adj, mc.cores = detectCores())
return(loops_list)
# ll = list()
# for(i in 1:length(loops_list)){
#   for(j in 1:length(loops_list[[i]])){
#     ll[[length(ll)+1]] = loops_list[[i]][[j]]
#   }
# }
#
# return(ll)
# if(length(loops) > 0){
#
#   ll <- list()
#   for(i in 1:length(loops)){
#
#     ll[[length(ll)+1]] <- rownames(adjacency)[loops[[i]][1:(length(loops[[i]])-1)]]
#
#   }
#
#   return(ll)
#
# }
# else{return(NULL)}
}
library(readr)
signaling_pathway_matebolic_network <- read_csv("signaling_pathway_matebolic_network.csv")
library(doParallel)
argsJob= commandArgs(trailingOnly=TRUE)
library(igraph)
library(parallel)
ll = getLoops_parallel(sif = signaling_pathway_matebolic_network, loopLength = 3)
View(ll)
getLoops_parallel <- function(sif = sif, loopLength = 3){
sif1 <- sif
g <- graph_from_data_frame(d = as.data.frame(sif1[, c(1, 3)]), directed = TRUE)
adj <- get.adjacency(g)
adjacency <- get.adjacency(g)
get_loops <- function(adj, paths, maxlen){
maxlen <- maxlen - 1
nxt_paths <- list()
for(path in paths$paths){
for(nxt in adj[[path[length(path)]]]){
nxt_path <- c(path, nxt)
if(path[1] == nxt & min(path) == nxt){
paths$loops <- c(paths$loops, list(nxt_path))
}else if(!(nxt %in% path)){
nxt_paths <- c(nxt_paths, list(nxt_path))
}
}
}
paths$paths <- nxt_paths
if(maxlen == 0){
return(paths)
}else{
return(get_loops(adj, paths, maxlen))
}
}
adj <- list()
loops <- list()
maxlen <- loopLength
for(v in V(g)){
adj[[as.numeric(v)]] <- neighbors(g, v)
}
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
nParallel <- detectCores()
SS = chunk(x = seq(length(adj)), n = nParallel)
loops_list <- mclapply(1:nParallel, function(repIndex,SS, maxlen, adj){
loops <- list()
for(start in SS[[repIndex]]){
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
return(loops)
},SS, maxlen, adj, mc.cores = detectCores())
return(loops_list)
# ll = list()
# for(i in 1:length(loops_list)){
#   for(j in 1:length(loops_list[[i]])){
#     ll[[length(ll)+1]] = loops_list[[i]][[j]]
#   }
# }
#
# return(ll)
# if(length(loops) > 0){
#
#   ll <- list()
#   for(i in 1:length(loops)){
#
#     ll[[length(ll)+1]] <- rownames(adjacency)[loops[[i]][1:(length(loops[[i]])-1)]]
#
#   }
#
#   return(ll)
#
# }
# else{return(NULL)}
}
library(readr)
signaling_pathway_matebolic_network <- read_csv("signaling_pathway_matebolic_network.csv")
library(doParallel)
argsJob= commandArgs(trailingOnly=TRUE)
library(igraph)
library(parallel)
ll = getLoops_parallel(sif = signaling_pathway_matebolic_network, loopLength = 4)
save(ll, file = "loops_5.Rdata")
getLoops_parallel <- function(sif = sif, loopLength = 3){
sif1 <- sif
g <- graph_from_data_frame(d = as.data.frame(sif1[, c(1, 3)]), directed = TRUE)
adj <- get.adjacency(g)
adjacency <- get.adjacency(g)
get_loops <- function(adj, paths, maxlen){
maxlen <- maxlen - 1
nxt_paths <- list()
for(path in paths$paths){
for(nxt in adj[[path[length(path)]]]){
nxt_path <- c(path, nxt)
if(path[1] == nxt & min(path) == nxt){
paths$loops <- c(paths$loops, list(nxt_path))
}else if(!(nxt %in% path)){
nxt_paths <- c(nxt_paths, list(nxt_path))
}
}
}
paths$paths <- nxt_paths
if(maxlen == 0){
return(paths)
}else{
return(get_loops(adj, paths, maxlen))
}
}
adj <- list()
loops <- list()
maxlen <- loopLength
for(v in V(g)){
adj[[as.numeric(v)]] <- neighbors(g, v)
}
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
nParallel <- detectCores()
SS = chunk(x = seq(length(adj)), n = nParallel)
loops_list <- mclapply(1:nParallel, function(repIndex,SS, maxlen, adj){
loops <- list()
for(start in SS[[repIndex]]){
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
return(loops)
},SS, maxlen, adj, mc.cores = detectCores())
return(loops_list)
ll = list()
for(i in 1:length(loops_list)){
for(j in 1:length(loops_list[[i]])){
ll[[length(ll)+1]] = loops_list[[i]][[j]]
}
}
return(ll)
if(length(loops) > 0){
ll <- list()
for(i in 1:length(loops)){
ll[[length(ll)+1]] <- rownames(adjacency)[loops[[i]][1:(length(loops[[i]])-1)]]
}
return(ll)
}
else{return(NULL)}
}
library(readr)
signaling_pathway_matebolic_network <- read_csv("signaling_pathway_matebolic_network.csv")
library(doParallel)
argsJob= commandArgs(trailingOnly=TRUE)
library(igraph)
library(parallel)
ll = getLoops_parallel(sif = signaling_pathway_matebolic_network, loopLength = 3)
save(ll, file = "loops_3.Rdata")
View(ll)
getLoops_parallel <- function(sif = sif, loopLength = 3){
sif1 <- sif
g <- graph_from_data_frame(d = as.data.frame(sif1[, c(1, 3)]), directed = TRUE)
adj <- get.adjacency(g)
adjacency <- get.adjacency(g)
get_loops <- function(adj, paths, maxlen){
maxlen <- maxlen - 1
nxt_paths <- list()
for(path in paths$paths){
for(nxt in adj[[path[length(path)]]]){
nxt_path <- c(path, nxt)
if(path[1] == nxt & min(path) == nxt){
paths$loops <- c(paths$loops, list(nxt_path))
}else if(!(nxt %in% path)){
nxt_paths <- c(nxt_paths, list(nxt_path))
}
}
}
paths$paths <- nxt_paths
if(maxlen == 0){
return(paths)
}else{
return(get_loops(adj, paths, maxlen))
}
}
adj <- list()
loops <- list()
maxlen <- loopLength
for(v in V(g)){
adj[[as.numeric(v)]] <- neighbors(g, v)
}
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
nParallel <- detectCores()
SS = chunk(x = seq(length(adj)), n = nParallel)
loops_list <- mclapply(1:nParallel, function(repIndex,SS, maxlen, adj){
loops <- list()
for(start in SS[[repIndex]]){
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
return(loops)
},SS, maxlen, adj, mc.cores = detectCores())
return(loops_list)
ll = list()
for(i in 1:length(loops_list)){
for(j in 1:length(loops_list[[i]])){
ll[[length(ll)+1]] = loops_list[[i]][[j]]
}
}
# return(ll)
if(length(loops) > 0){
ll <- list()
for(i in 1:length(loops)){
ll[[length(ll)+1]] <- rownames(adjacency)[loops[[i]][1:(length(loops[[i]])-1)]]
}
return(ll)
}
else{return(NULL)}
}
library(readr)
signaling_pathway_matebolic_network <- read_csv("signaling_pathway_matebolic_network.csv")
library(doParallel)
argsJob= commandArgs(trailingOnly=TRUE)
library(igraph)
library(parallel)
ll = getLoops_parallel(sif = signaling_pathway_matebolic_network, loopLength = 3)
save(ll, file = "loops_3.Rdata")
View(ll)
View(ll)
View(getLoops_parallel)
View(signaling_pathway_matebolic_network)
View(ll)
getLoops_parallel <- function(sif = sif, loopLength = 3){
sif1 <- sif
g <- graph_from_data_frame(d = as.data.frame(sif1[, c(1, 3)]), directed = TRUE)
adj <- get.adjacency(g)
adjacency <- get.adjacency(g)
get_loops <- function(adj, paths, maxlen){
maxlen <- maxlen - 1
nxt_paths <- list()
for(path in paths$paths){
for(nxt in adj[[path[length(path)]]]){
nxt_path <- c(path, nxt)
if(path[1] == nxt & min(path) == nxt){
paths$loops <- c(paths$loops, list(nxt_path))
}else if(!(nxt %in% path)){
nxt_paths <- c(nxt_paths, list(nxt_path))
}
}
}
paths$paths <- nxt_paths
if(maxlen == 0){
return(paths)
}else{
return(get_loops(adj, paths, maxlen))
}
}
adj <- list()
loops <- list()
maxlen <- loopLength
for(v in V(g)){
adj[[as.numeric(v)]] <- neighbors(g, v)
}
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
nParallel <- detectCores()
SS = chunk(x = seq(length(adj)), n = nParallel)
loops_list <- mclapply(1:nParallel, function(repIndex,SS, maxlen, adj){
loops <- list()
for(start in SS[[repIndex]]){
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
return(loops)
},SS, maxlen, adj, mc.cores = detectCores())
# return(loops_list)
ll = list()
for(i in 1:length(loops_list)){
for(j in 1:length(loops_list[[i]])){
ll[[length(ll)+1]] = loops_list[[i]][[j]]
}
}
loops <- ll
# return(ll)
if(length(loops) > 0){
ll <- list()
for(i in 1:length(loops)){
ll[[length(ll)+1]] <- rownames(adjacency)[loops[[i]][1:(length(loops[[i]])-1)]]
}
return(ll)
}
else{return(NULL)}
}
library(readr)
signaling_pathway_matebolic_network <- read_csv("signaling_pathway_matebolic_network.csv")
library(doParallel)
argsJob= commandArgs(trailingOnly=TRUE)
library(igraph)
library(parallel)
ll = getLoops_parallel(sif = signaling_pathway_matebolic_network, loopLength = 3)
save(ll, file = "loops_3.Rdata")
View(ll)
View(ll)
signaling_pathway_matebolic_network <- read_csv("signaling_pathway_matebolic_network.csv")
View(signaling_pathway_matebolic_network)
library(readr)
signaling_pathway_matebolic_network <- read_csv("signaling_pathway_matebolic_network.csv")
library(doParallel)
argsJob= commandArgs(trailingOnly=TRUE)
View(signaling_pathway_matebolic_network)
getLoops_parallel <- function(sif = sif, loopLength = 3){
sif1 <- sif
g <- graph_from_data_frame(d = as.data.frame(sif1[, c(1, 3)]), directed = TRUE)
adj <- get.adjacency(g)
adjacency <- get.adjacency(g)
get_loops <- function(adj, paths, maxlen){
maxlen <- maxlen - 1
nxt_paths <- list()
for(path in paths$paths){
for(nxt in adj[[path[length(path)]]]){
nxt_path <- c(path, nxt)
if(path[1] == nxt & min(path) == nxt){
paths$loops <- c(paths$loops, list(nxt_path))
}else if(!(nxt %in% path)){
nxt_paths <- c(nxt_paths, list(nxt_path))
}
}
}
paths$paths <- nxt_paths
if(maxlen == 0){
return(paths)
}else{
return(get_loops(adj, paths, maxlen))
}
}
adj <- list()
loops <- list()
maxlen <- loopLength
for(v in V(g)){
adj[[as.numeric(v)]] <- neighbors(g, v)
}
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
nParallel <- detectCores()
SS = chunk(x = seq(length(adj)), n = nParallel)
loops_list <- mclapply(1:nParallel, function(repIndex,SS, maxlen, adj){
loops <- list()
for(start in SS[[repIndex]]){
loops <- c(loops, get_loops(adj, list(paths = list(c(start)),
loops = list()), maxlen)$loops)
}
return(loops)
},SS, maxlen, adj, mc.cores = detectCores())
# return(loops_list)
ll = list()
for(i in 1:length(loops_list)){
for(j in 1:length(loops_list[[i]])){
ll[[length(ll)+1]] = loops_list[[i]][[j]]
}
}
loops <- ll
# return(ll)
if(length(loops) > 0){
ll <- list()
for(i in 1:length(loops)){
ll[[length(ll)+1]] <- rownames(adjacency)[loops[[i]][1:(length(loops[[i]])-1)]]
}
return(ll)
}
else{return(NULL)}
}
library(readr)
signaling_pathway_matebolic_network <- read_csv("signaling_pathway_matebolic_network.csv")
library(doParallel)
argsJob= commandArgs(trailingOnly=TRUE)
library(igraph)
library(parallel)
ll = getLoops_parallel(sif = signaling_pathway_matebolic_network, loopLength = 3)
save(ll, file = "loops_3.Rdata")
